{
  "address": "0xaF28a1947cafC1Aab004081A6194e4bcD5e5300B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotEnoughETH",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FundMe__WithdrawFailed",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MIN_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder_address",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x14287e7faabf05ba3d2b2b1f17d76f9e8e09c5651034bc25b7646dc010f04cdf",
  "receipt": {
    "to": null,
    "from": "0xD067C9823438a281A3a266dF2E118F7FC7a9dA95",
    "contractAddress": "0xaF28a1947cafC1Aab004081A6194e4bcD5e5300B",
    "transactionIndex": 51,
    "gasUsed": "798505",
    "logsBloom": "0x
    "blockHash": "0x67b5bf414ee789a862a4a1a867fe8d10e6e20b279dfbb1a1d3dd7a85bd2dfee1",
    "transactionHash": "0x14287e7faabf05ba3d2b2b1f17d76f9e8e09c5651034bc25b7646dc010f04cdf",
    "logs": [],
    "blockNumber": 3946748,
    "cumulativeGasUsed": "7685829",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x694AA1769357215DE4FAC081bf1f309aDC325306"],
  "numDeployments": 3,
  "solcInputHash": "b5880bfda19154a659043f9152d44f18",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotEnoughETH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FundMe__WithdrawFailed\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MIN_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder_address\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"V\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"priceFeedAddress\":\"Can be set by function calls to adapt to different chains\"}}},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"./PriceConverter.sol\\\";\\n\\n// Error codes\\nerror FundMe__NotOwner();\\nerror FundMe__NotEnoughETH();\\nerror FundMe__WithdrawFailed();\\n\\n// Interfaces, libs, contracts\\n\\n/**\\n * @title A contract for crowd funding\\n * @author V\\n * @notice This contract is to demo a sample funding contract\\n * @dev This implements price feeds as our library\\n */\\ncontract FundMe {\\n    // Type Declarations\\n\\n    using PriceConverter for uint256;\\n\\n    // State variables\\n\\n    uint256 public constant MIN_USD = 50 * 1e18;\\n\\n    address[] private s_funders;\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n\\n    address private immutable i_owner;\\n\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    // Modifiers\\n    modifier onlyOwner() {\\n        // require(msg.sender == i_owner, \\\"Sender is not owner\\\"); //Every letter takes space -> not gas efficient\\n        if (msg.sender != i_owner) {\\n            revert FundMe__NotOwner();\\n        }\\n\\n        _;\\n    }\\n\\n    /**\\n     *\\n     * @param priceFeedAddress Can be set by function calls to adapt to different chains\\n     */\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    function fund() public payable {\\n        if (!(msg.value.getConversionRate(s_priceFeed) > MIN_USD)) {\\n            revert FundMe__NotEnoughETH();\\n        }\\n\\n        s_funders.push(msg.sender);\\n        s_addressToAmountFunded[msg.sender] = msg.value;\\n    }\\n\\n    // Original and expensive version\\n    /* function withdraw() public onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length; // Every hit reads `s_funders`\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n\\n        payable(msg.sender).transfer(address(this).balance);\\n        bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        require(sendSuccess, \\\"Send failed\\\");\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    } */\\n\\n    function withdraw() public payable onlyOwner {\\n        /**\\n         * Copy s_funders into memory space variable `funders`, where reading from it\\n         * is a lot cheaper\\n         *\\n         * mappings can't be in memory\\n         */\\n        address[] memory funders = s_funders;\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool callSuccess, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        if (!callSuccess) {\\n            revert FundMe__WithdrawFailed();\\n        }\\n        // require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunders(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(\\n        address funder_address\\n    ) public view returns (uint256) {\\n        return s_addressToAmountFunded[funder_address];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0x6e8785157214b620b304827ea2a545bf40bef55bb2f21819bfc3ee6a437e127b\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        return uint256(price * 1e10); //1^10\\n    }\\n\\n    function getConversionRate(\\n        uint256 ethAmount, AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 price = getPrice(priceFeed); \\n        uint256 ethAmountInUsd = (price * ethAmount) / 1e18;\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x2b84b1b0b11b5ca993111795e335f0250a7359a5f1921abde69874eff01b8067\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610e73380380610e7383398181016040528101906100329190610110565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061013d565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100dd826100b2565b9050919050565b6100ed816100d2565b81146100f857600080fd5b50565b60008151905061010a816100e4565b92915050565b600060208284031215610126576101256100ad565b5b6000610134848285016100fb565b91505092915050565b608051610d0d6101666000396000818161035a0152818161055001526106170152610d0d6000f3fe6080604052600436106100745760003560e01c80633ccfd60b1161004e5780633ccfd60b14610132578063893d20e81461013c5780639e87a5cd14610167578063b60d42881461019257610083565b80630343fb251461008d578063213dbea2146100ca5780633a7b6c74146100f557610083565b366100835761008161019c565b005b61008b61019c565b005b34801561009957600080fd5b506100b460048036038101906100af919061083c565b6102bb565b6040516100c19190610882565b60405180910390f35b3480156100d657600080fd5b506100df610304565b6040516100ec9190610882565b60405180910390f35b34801561010157600080fd5b5061011c600480360381019061011791906108c9565b610311565b6040516101299190610905565b60405180910390f35b61013a610358565b005b34801561014857600080fd5b50610151610613565b60405161015e9190610905565b60405180910390f35b34801561017357600080fd5b5061017c61063b565b604051610189919061097f565b60405180910390f35b61019a61019c565b005b6802b5e3af16b18800006101db600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461066590919063ffffffff16565b11610212576040517fb514e4ed00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6802b5e3af16b188000081565b60008082815481106103265761032561099a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103dd576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561046057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610416575b5050505050905060005b81518110156104eb5760008282815181106104885761048761099a565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104e3906109f8565b91505061046a565b50600067ffffffffffffffff81111561050757610506610a40565b5b6040519080825280602002602001820160405280156105355781602001602082028036833780820191505090505b506000908051906020019061054b929190610732565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161059290610aa0565b60006040518083038185875af1925050503d80600081146105cf576040519150601f19603f3d011682016040523d82523d6000602084013e6105d4565b606091505b505090508061060f576040517ff02e6d3000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080610671836106a1565b90506000670de0b6b3a7640000858361068a9190610ab5565b6106949190610b26565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156106ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107139190610be4565b5050509150506402540be4008161072a9190610c5f565b915050919050565b8280548282559060005260206000209081019282156107ab579160200282015b828111156107aa5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610752565b5b5090506107b891906107bc565b5090565b5b808211156107d55760008160009055506001016107bd565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610809826107de565b9050919050565b610819816107fe565b811461082457600080fd5b50565b60008135905061083681610810565b92915050565b600060208284031215610852576108516107d9565b5b600061086084828501610827565b91505092915050565b6000819050919050565b61087c81610869565b82525050565b60006020820190506108976000830184610873565b92915050565b6108a681610869565b81146108b157600080fd5b50565b6000813590506108c38161089d565b92915050565b6000602082840312156108df576108de6107d9565b5b60006108ed848285016108b4565b91505092915050565b6108ff816107fe565b82525050565b600060208201905061091a60008301846108f6565b92915050565b6000819050919050565b600061094561094061093b846107de565b610920565b6107de565b9050919050565b60006109578261092a565b9050919050565b60006109698261094c565b9050919050565b6109798161095e565b82525050565b60006020820190506109946000830184610970565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a0382610869565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a3557610a346109c9565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610a8a600083610a6f565b9150610a9582610a7a565b600082019050919050565b6000610aab82610a7d565b9150819050919050565b6000610ac082610869565b9150610acb83610869565b9250828202610ad981610869565b91508282048414831517610af057610aef6109c9565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b3182610869565b9150610b3c83610869565b925082610b4c57610b4b610af7565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610b7681610b57565b8114610b8157600080fd5b50565b600081519050610b9381610b6d565b92915050565b6000819050919050565b610bac81610b99565b8114610bb757600080fd5b50565b600081519050610bc981610ba3565b92915050565b600081519050610bde8161089d565b92915050565b600080600080600060a08688031215610c0057610bff6107d9565b5b6000610c0e88828901610b84565b9550506020610c1f88828901610bba565b9450506040610c3088828901610bcf565b9350506060610c4188828901610bcf565b9250506080610c5288828901610b84565b9150509295509295909350565b6000610c6a82610b99565b9150610c7583610b99565b9250828202610c8381610b99565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610cbb57610cba6109c9565b5b8282058414831517610cd057610ccf6109c9565b5b509291505056fea26469706673582212204bff3766a63a8f290be73bfaf467b021381425e7ae982c95e97cde16a9e9cf2864736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c80633ccfd60b1161004e5780633ccfd60b14610132578063893d20e81461013c5780639e87a5cd14610167578063b60d42881461019257610083565b80630343fb251461008d578063213dbea2146100ca5780633a7b6c74146100f557610083565b366100835761008161019c565b005b61008b61019c565b005b34801561009957600080fd5b506100b460048036038101906100af919061083c565b6102bb565b6040516100c19190610882565b60405180910390f35b3480156100d657600080fd5b506100df610304565b6040516100ec9190610882565b60405180910390f35b34801561010157600080fd5b5061011c600480360381019061011791906108c9565b610311565b6040516101299190610905565b60405180910390f35b61013a610358565b005b34801561014857600080fd5b50610151610613565b60405161015e9190610905565b60405180910390f35b34801561017357600080fd5b5061017c61063b565b604051610189919061097f565b60405180910390f35b61019a61019c565b005b6802b5e3af16b18800006101db600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461066590919063ffffffff16565b11610212576040517fb514e4ed00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6802b5e3af16b188000081565b60008082815481106103265761032561099a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103dd576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561046057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610416575b5050505050905060005b81518110156104eb5760008282815181106104885761048761099a565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104e3906109f8565b91505061046a565b50600067ffffffffffffffff81111561050757610506610a40565b5b6040519080825280602002602001820160405280156105355781602001602082028036833780820191505090505b506000908051906020019061054b929190610732565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161059290610aa0565b60006040518083038185875af1925050503d80600081146105cf576040519150601f19603f3d011682016040523d82523d6000602084013e6105d4565b606091505b505090508061060f576040517ff02e6d3000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080610671836106a1565b90506000670de0b6b3a7640000858361068a9190610ab5565b6106949190610b26565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156106ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107139190610be4565b5050509150506402540be4008161072a9190610c5f565b915050919050565b8280548282559060005260206000209081019282156107ab579160200282015b828111156107aa5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610752565b5b5090506107b891906107bc565b5090565b5b808211156107d55760008160009055506001016107bd565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610809826107de565b9050919050565b610819816107fe565b811461082457600080fd5b50565b60008135905061083681610810565b92915050565b600060208284031215610852576108516107d9565b5b600061086084828501610827565b91505092915050565b6000819050919050565b61087c81610869565b82525050565b60006020820190506108976000830184610873565b92915050565b6108a681610869565b81146108b157600080fd5b50565b6000813590506108c38161089d565b92915050565b6000602082840312156108df576108de6107d9565b5b60006108ed848285016108b4565b91505092915050565b6108ff816107fe565b82525050565b600060208201905061091a60008301846108f6565b92915050565b6000819050919050565b600061094561094061093b846107de565b610920565b6107de565b9050919050565b60006109578261092a565b9050919050565b60006109698261094c565b9050919050565b6109798161095e565b82525050565b60006020820190506109946000830184610970565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a0382610869565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a3557610a346109c9565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610a8a600083610a6f565b9150610a9582610a7a565b600082019050919050565b6000610aab82610a7d565b9150819050919050565b6000610ac082610869565b9150610acb83610869565b9250828202610ad981610869565b91508282048414831517610af057610aef6109c9565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b3182610869565b9150610b3c83610869565b925082610b4c57610b4b610af7565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610b7681610b57565b8114610b8157600080fd5b50565b600081519050610b9381610b6d565b92915050565b6000819050919050565b610bac81610b99565b8114610bb757600080fd5b50565b600081519050610bc981610ba3565b92915050565b600081519050610bde8161089d565b92915050565b600080600080600060a08688031215610c0057610bff6107d9565b5b6000610c0e88828901610b84565b9550506020610c1f88828901610bba565b9450506040610c3088828901610bcf565b9350506060610c4188828901610bcf565b9250506080610c5288828901610b84565b9150509295509295909350565b6000610c6a82610b99565b9150610c7583610b99565b9250828202610c8381610b99565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610cbb57610cba6109c9565b5b8282058414831517610cd057610ccf6109c9565b5b509291505056fea26469706673582212204bff3766a63a8f290be73bfaf467b021381425e7ae982c95e97cde16a9e9cf2864736f6c63430008130033",
  "devdoc": {
    "author": "V",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "priceFeedAddress": "Can be set by function calls to adapt to different chains"
        }
      }
    },
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract is to demo a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 66,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 70,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 75,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
